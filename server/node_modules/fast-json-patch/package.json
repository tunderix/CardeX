{
  "_args": [
    [
      {
        "raw": "fast-json-patch@github:starcounter-jack/JSON-Patch",
        "scope": null,
        "escapedName": "fast-json-patch",
        "name": "fast-json-patch",
        "rawSpec": "github:starcounter-jack/JSON-Patch",
        "spec": "github:starcounter-jack/JSON-Patch",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:starcounter-jack/JSON-Patch.git",
          "sshUrl": "git+ssh://git@github.com/starcounter-jack/JSON-Patch.git",
          "httpsUrl": "git+https://github.com/starcounter-jack/JSON-Patch.git",
          "gitUrl": "git://github.com/starcounter-jack/JSON-Patch.git",
          "shortcut": "github:starcounter-jack/JSON-Patch",
          "directUrl": "https://raw.githubusercontent.com/starcounter-jack/JSON-Patch/master/package.json"
        }
      },
      "/home/ioni/Projects/CardeX/CardeX/server/node_modules/colyseus"
    ]
  ],
  "_from": "starcounter-jack/JSON-Patch",
  "_id": "fast-json-patch@1.0.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/fast-json-patch",
  "_phantomChildren": {},
  "_requested": {
    "raw": "fast-json-patch@github:starcounter-jack/JSON-Patch",
    "scope": null,
    "escapedName": "fast-json-patch",
    "name": "fast-json-patch",
    "rawSpec": "github:starcounter-jack/JSON-Patch",
    "spec": "github:starcounter-jack/JSON-Patch",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:starcounter-jack/JSON-Patch.git",
      "sshUrl": "git+ssh://git@github.com/starcounter-jack/JSON-Patch.git",
      "httpsUrl": "git+https://github.com/starcounter-jack/JSON-Patch.git",
      "gitUrl": "git://github.com/starcounter-jack/JSON-Patch.git",
      "shortcut": "github:starcounter-jack/JSON-Patch",
      "directUrl": "https://raw.githubusercontent.com/starcounter-jack/JSON-Patch/master/package.json"
    }
  },
  "_requiredBy": [
    "/colyseus"
  ],
  "_resolved": "git://github.com/starcounter-jack/JSON-Patch.git#ec64463384c14741edfec15e10b7e53fd6d37f43",
  "_shasum": "6d8c6507352a85857392efec4f9d1cc94d244952",
  "_shrinkwrap": null,
  "_spec": "fast-json-patch@github:starcounter-jack/JSON-Patch",
  "_where": "/home/ioni/Projects/CardeX/CardeX/server/node_modules/colyseus",
  "author": {
    "name": "Joachim Wester",
    "email": "joachimwester@me.com",
    "url": "http://www.starcounter.com/"
  },
  "bugs": {
    "url": "https://github.com/Starcounter-Jack/JSON-Patch/issues"
  },
  "dependencies": {},
  "description": "Fast implementation of JSON-Patch (RFC-6902) with duplex (observe changes) capabilities",
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-bump": "^0.3.0",
    "grunt-contrib-uglify": "~0.5.0",
    "jasmine-node": "^1.14.5",
    "jsdom": "^9.2.1"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "gitHead": "ec64463384c14741edfec15e10b7e53fd6d37f43",
  "homepage": "https://github.com/Starcounter-Jack/JSON-Patch",
  "keywords": [
    "json",
    "patch",
    "http",
    "rest"
  ],
  "license": "MIT",
  "main": "./src/json-patch-duplex.js",
  "name": "fast-json-patch",
  "optionalDependencies": {},
  "readme": "JSON-Patch\n===============\n\nA leaner and meaner implementation of JSON-Patch. Small footprint. High performance.\n\nWith JSON-Patch, you can:\n- **apply** patches\n- **validate** a sequence of patches\n- **observe** for changes (and generate patches when a change is detected)\n- **compare** two objects (to obtain the difference)\n\n## Why you should use JSON-Patch\n\nJSON-Patch [(RFC6902)](http://tools.ietf.org/html/rfc6902) is a standard format that\nallows you to update a JSON document by sending the changes rather than the whole document.\nJSON Patch plays well with the HTTP PATCH verb (method) and REST style programming.\n\nMark Nottingham has a [nice blog]( http://www.mnot.net/blog/2012/09/05/patch) about it.\n\n## Footprint\n1.22 KB minified and gzipped (3 KB minified)\n\n## Performance\n\n##### [`add` benchmark](http://jsperf.com/json-patch-benchmark/2)\n\n<img width=\"907\" alt=\"screenshot 2015-10-22 20 35 22\" src=\"https://cloud.githubusercontent.com/assets/566463/10674707/b3deec60-78fc-11e5-876d-59c90a0cab2f.png\">\n\n##### [`replace` benchmark](http://jsperf.com/json-patch-benchmark-replace/2)\n\n<img width=\"904\" alt=\"screenshot 2015-10-22 20 35 58\" src=\"https://cloud.githubusercontent.com/assets/566463/10674708/b6f80d14-78fc-11e5-82c6-658510f31f63.png\">\n\nTested on 22.10.2015. Compared libraries:\n\n- [Starcounter-Jack/JSON-Patch](https://github.com/Starcounter-Jack/JSON-Patch) 0.5.4\n- [bruth/jsonpatch-js](https://github.com/bruth/jsonpatch-js) 0.5.0\n- [dharmafly/jsonpatch.js](https://github.com/dharmafly/jsonpatch.js) master branch\n- [jiff](https://www.npmjs.com/package/jiff) 0.7.2 browserified\n- [json8-patch](https://www.npmjs.com/package/json8-patch) 0.3.2 browserified\n\nWe aim the tests to be fair. Our library puts performance as the #1 priority, while other libraries can have different priorities. If you'd like to update the benchmarks or add a library, please edit the jsperf benchmarks linked above and open an issue to include new results.\n\n## Features\n* Allows you to apply patches on object trees for incoming traffic.\n* Allows you to freely manipulate object trees and then generate patches for outgoing traffic.\n* Tested in IE 8-11, Firefox, Chrome, Safari and Node.js\n\n\n## Install\n\nInstall the current version (and save it as a dependency):\n\n### npm\n\n```sh\n$ npm install fast-json-patch --save\n```\n### bower\n\n```sh\n$ bower install fast-json-patch --save\n```\n\n### [download as ZIP](https://github.com/Starcounter-Jack/JSON-Patch/archive/master.zip)\n\n\n## Adding to your project\n\n### In a web browser\n\nInclude `json-patch.js` if you want support for applying patches **or**\ninclude `json-patch-duplex.js` if you also want to generate patches.\n\n### In Node.js\n\nCall require to get the instance:\n\n```js\nvar jsonpatch = require('fast-json-patch')\n```\n\n## Usage\n\nApplying patches:\n\n```js\nvar myobj = { firstName:\"Albert\", contactDetails: { phoneNumbers: [ ] } };\nvar patches = [\n   {op:\"replace\", path:\"/firstName\", value:\"Joachim\" },\n   {op:\"add\", path:\"/lastName\", value:\"Wester\" },\n   {op:\"add\", path:\"/contactDetails/phoneNumbers/0\", value:{ number:\"555-123\" }  }\n   ];\njsonpatch.apply( myobj, patches );\n// myobj == { firstName:\"Joachim\", lastName:\"Wester\", contactDetails:{ phoneNumbers[ {number:\"555-123\"} ] } };\n```\nGenerating patches:\n\n```js\nvar myobj = { firstName:\"Joachim\", lastName:\"Wester\", contactDetails: { phoneNumbers: [ { number:\"555-123\" }] } };\nobserver = jsonpatch.observe( myobj );\nmyobj.firstName = \"Albert\";\nmyobj.contactDetails.phoneNumbers[0].number = \"123\";\nmyobj.contactDetails.phoneNumbers.push({number:\"456\"});\nvar patches = jsonpatch.generate(observer);\n// patches  == [\n//   { op:\"replace\", path=\"/firstName\", value:\"Albert\"},\n//   { op:\"replace\", path=\"/contactDetails/phoneNumbers/0/number\", value:\"123\"},\n//   { op:\"add\", path=\"/contactDetails/phoneNumbers/1\", value:{number:\"456\"}}];\n```\nComparing two object trees:\n\n```js\nvar objA = {user: {firstName: \"Albert\", lastName: \"Einstein\"}};\nvar objB = {user: {firstName: \"Albert\", lastName: \"Collins\"}};\nvar diff = jsonpatch.compare(objA, objB));\n//diff == [{op: \"replace\", path: \"/user/lastName\", value: \"Collins\"}]\n```\n\nValidating a sequence of patches:\n\n```js\nvar obj = {user: {firstName: \"Albert\"}};\nvar patches = [{op: \"replace\", path: \"/user/firstName\", value: \"Albert\"}, {op: \"replace\", path: \"/user/lastName\", value: \"Einstein\"}];\nvar errors = jsonpatch.validate(patches, obj);\nif (errors.length == 0) {\n //there are no errors!\n}\nelse {\n  for (var i=0; i < errors.length; i++) {\n    if (!errors[i]) {\n      console.log(\"Valid patch at index\", i, patches[i]);\n    }\n    else {\n      console.error(\"Invalid patch at index\", i, errors[i], patches[i]);\n    }\n  }\n}\n```\n\n## API\n\n#### jsonpatch.apply (`obj` Object, `patches` Array, `validate` Boolean) : boolean\n\nAvailable in *json-patch.js* and *json-patch-duplex.js*\n\nApplies `patches` array on `obj`.\n\nIf the `validate` parameter is set to `true`, the patch is extensively validated before applying.\nAn invalid patch results in throwing an error (see `jsonpatch.validate` for more information about the error object).\n\nReturns an array of results - one item for each item in `patches`. The type of each item depends on type of operation applied\n* `test` - boolean result of the test\n* `remove`, `replace` and `move` - original object that has been removed\n* `add` (only when adding to an array) - index at which item has been inserted (useful when using `-` alias)\n\n#### jsonpatch.observe (`obj` Object, `callback` Function (optional)) : `observer` Object\n\nAvailable in *json-patch-duplex.js*\n\nSets up an deep observer on `obj` that listens for changes in object tree. When changes are detected, the optional\ncallback is called with the generated patches array as the parameter.\n\nReturns `observer`.\n\n#### jsonpatch.generate (`obj` Object, `observer` Object) : `patches` Array\n\nAvailable in *json-patch-duplex.js*\n\nIf there are pending changes in `obj`, returns them synchronously. If a `callback` was defined in `observe`\nmethod, it will be triggered synchronously as well.\n\nIf there are no pending changes in `obj`, returns an empty array (length 0).\n\n#### jsonpatch.unobserve (`obj` Object, `observer` Object) : void\n\nAvailable in *json-patch-duplex.js*\n\nDestroys the observer set up on `obj`.\n\nAny remaining changes are delivered synchronously (as in `jsonpatch.generate`). Note: this is different that ES6/7 `Object.unobserve`, which delivers remaining changes asynchronously.\n\n#### jsonpatch.compare (`obj1` Object, `obj2` Object) : `patches` Array\n\nAvailable in *json-patch-duplex.js*\n\nCompares object trees `obj1` and `obj2` and returns the difference relative to `obj1` as a patches array.\n\nIf there are no differences, returns an empty array (length 0).\n\n#### jsonpatch.validate (`patches` Array, `tree` Object (optional)) : `error` JsonPatchError\n\nAvailable in *json-patch.js* and *json-patch-duplex.js*\n\nValidates a sequence of operations. If `tree` parameter is provided, the sequence is additionally validated against the object tree.\n\nIf there are no errors, returns undefined. If there is an errors, returns a JsonPatchError object with the following properties:\n\n- `name` String - short error code\n- `message` String - long human readable error message\n- `index` Number - index of the operation in the sequence\n- `operation` Object - reference to the operation\n- `tree` Object - reference to the tree\n\nPossible errors:\n\nError name                    | Error message\n------------------------------|------------\nSEQUENCE_NOT_AN_ARRAY         | Patch sequence must be an array\nOPERATION_NOT_AN_OBJECT       | Operation is not an object\nOPERATION_OP_INVALID          | Operation `op` property is not one of operations defined in RFC-6902\nOPERATION_PATH_INVALID        | Operation `path` property is not a string\nOPERATION_FROM_REQUIRED       | Operation `from` property is not present (applicable in `move` and `copy` operations)\nOPERATION_VALUE_REQUIRED      | Operation `value` property is not present, or `undefined` (applicable in `add`, `replace` and `test` operations)\nOPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED  | Operation `value` property object has at least one `undefined` value (applicable in `add`, `replace` and `test` operations)\nOPERATION_PATH_CANNOT_ADD     | Cannot perform an `add` operation at the desired path\nOPERATION_PATH_UNRESOLVABLE   | Cannot perform the operation at a path that does not exist\nOPERATION_FROM_UNRESOLVABLE   | Cannot perform the operation from a path that does not exist\nOPERATION_PATH_ILLEGAL_ARRAY_INDEX | Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index\nOPERATION_VALUE_OUT_OF_BOUNDS | The specified index MUST NOT be greater than the number of elements in the array\n\n## `undefined`s (JS to JSON projection)\n\nAs `undefined` type does not exist in JSON, it's also not a valid value of JSON Patch operation. Therefore `jsonpatch` will not generate JSON Patches that sets anything to `undefined`.\n\nWhenever a value is set to `undefined` in JS, JSON-Patch methods `generate` and `compare` will treat it similarly to how JavaScript method [`JSON.stringify` (MDN)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) treats them:\n\n> If `undefined` (...) is encountered during conversion it is either omitted (when it is found in an object) or censored to `null` (when it is found in an array).\n\nSee the [ECMAScript spec](http://www.ecma-international.org/ecma-262/6.0/index.html#sec-json.stringify) for details.\n\n## Changelog\n\nTo see the list of recent changes, see [Releases](https://github.com/Starcounter-Jack/JSON-Patch/releases).\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/Starcounter-Jack/JSON-Patch.git"
  },
  "scripts": {
    "test": "jasmine-node --matchall --config duplex yes test/spec/coreSpec.js test/spec/duplexSpec.js",
    "test-core": "jasmine-node --matchall --config duplex no test/spec/coreSpec.js",
    "test-duplex": "jasmine-node --matchall --config duplex yes test/spec/duplexSpec.js"
  },
  "version": "1.0.0"
}
